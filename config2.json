{
  "epoints": [
    "<org.owasp.webgoat.HammerHead: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",
    "<org.owasp.webgoat.HammerHead: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",
    "<org.owasp.webgoat.LessonSource: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",
    "<org.owasp.webgoat.servlets.Controller: void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",
    "<org.owasp.webgoat.servlets.Controller: void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>"
  ],
  "sources": [
    "<javax.accessibility.AccessibleText: java.lang.String getSelectedText()>",
    "<javax.portlet.PortletRequest: java.lang.String[] getParameterValues(java.lang.String)>",
    "<javax.faces.component.html.HtmlCommandButton: java.lang.Object getValue()>",
    "<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)>",
    "<jakarta.servlet.http.HttpServletRequest: java.util.Enumeration getHeaderNames()>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getServletPath()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getLocalAddr()>",
    "<javax.servlet.http.HttpServletRequest: java.util.Enumeration getHeaders(java.lang.String)>",
    "<javax.portlet.ClientDataRequest: java.io.BufferedReader getReader()>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.String[] getParameterValues(java.lang.String)>",
    "<jakarta.servlet.ServletRequest: java.io.BufferedReader getReader()>",
    "<javax.portlet.PortletRequest: java.util.Enumeration getParameterNames()>",
    "<jakarta.servlet.ServletRequest: java.util.Map getParameterMap()>",
    "<javax.faces.context.ExternalContext: java.util.Map getRequestParameterValuesMap()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>",
    "<javax.portlet.PortletRequest: java.lang.String getParameter(java.lang.String)>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>",
    "<java.net.URLConnection: java.lang.Object getContent()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteUser()>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>",
    "<javax.portlet.PortletRequest: java.util.Map getParameterMap()>",
    "<javax.faces.context.ExternalContext: java.util.Map getRequestHeaderMap()>",
    "<java.net.URLConnection: java.lang.String getHeaderField(int)>",
    "<com.sun.mail.smtp.SMTPTransport: java.lang.String getLastServerResponse()>",
    "<javax.servlet.http.HttpServletRequest: java.util.Enumeration getParameterNames()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>",
    "<javax.accessibility.AccessibleText: java.lang.String getAfterIndex(int,int)>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>",
    "<javax.servlet.http.HttpServletRequest: javax.servlet.http.Part getPart(java.lang.String)>",
    "<org.apache.commons.fileupload.FileUploadBase: java.util.List parseRequest(org.apache.commons.fileupload.RequestContext)>",
    "<javax.servlet.ServletContext: java.util.Enumeration getInitParameterNames()>",
    "<java.net.URLConnection: java.util.Map getHeaderFields()>",
    "<org.apache.commons.fileupload.FileUploadBase: byte[] getBoundary(java.lang.String)>",
    "<javax.servlet.ServletRequest: java.lang.String getParameter(java.lang.String)>",
    "<javax.faces.component.UIInput: java.lang.String getRequiredMessage()>",
    "<java.net.URL: java.lang.Object getContent(java.lang.Class[])>",
    "<javax.servlet.http.HttpServletRequest: javax.servlet.ServletInputStream getInputStream()>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.StringBuffer getRequestURL()>",
    "<javax.servlet.ServletRequest: java.util.Locale getLocale()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>",
    "<jakarta.servlet.ServletRequest: java.lang.String[] getParameterValues(java.lang.String)>",
    "<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFieldName(java.lang.String)>",
    "<javax.faces.context.ExternalContext: java.util.Iterator getRequestParameterNames()>",
    "<jakarta.servlet.ServletRequest: java.lang.String getParameter(java.lang.String)>",
    "<jakarta.servlet.ServletRequest: jakarta.servlet.ServletInputStream getInputStream()>",
    "<java.net.HttpURLConnection: java.lang.String getResponseMessage()>",
    "<javax.servlet.ServletRequest: java.util.Enumeration getParameterNames()>",
    "<javax.faces.context.ExternalContext: java.lang.String getRequestPathInfo()>",
    "<javax.servlet.ServletRequest: java.util.Enumeration getLocales()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String[] getParameterValues(java.lang.String)>",
    "<javax.servlet.ServletRequest: java.lang.String getLocalAddr()>",
    "<jakarta.servlet.http.HttpServletRequest: java.util.Enumeration getParameterNames()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.StringBuffer getRequestURL()>",
    "<java.applet.Applet: java.lang.String getParameter(java.lang.String)>",
    "<javax.servlet.http.HttpServletRequest: java.util.Enumeration getAttributeNames()>",
    "<javax.servlet.ServletRequest: java.io.BufferedReader getReader()>",
    "<javax.faces.context.ExternalContext: java.util.Map getRequestParameterMap()>",
    "<javax.servlet.ServletRequest: java.util.Map getParameterMap()>",
    "<javax.servlet.ServletRequest: java.util.Enumeration getAttributeNames()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>",
    "<jakarta.servlet.http.HttpServletRequest: jakarta.servlet.http.Cookie[] getCookies()>",
    "<javax.portlet.ClientDataRequest: java.io.InputStream getPortletInputStream()>",
    "<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>",
    "<javax.servlet.ServletRequest: javax.servlet.ServletInputStream getInputStream()>",
    "<javax.faces.component.UIInput: java.lang.String getValidatorMessage()>",
    "<javax.faces.component.ValueHolder: java.lang.Object getLocalValue()>",
    "<javax.servlet.ServletContext: java.lang.String getInitParameter(java.lang.String)>",
    "<java.net.URLConnection: java.io.InputStream getInputStream()>",
    "<javax.faces.context.ExternalContext: java.util.Map getRequestHeaderValuesMap()>",
    "<java.net.URL: java.lang.Object getContent()>",
    "<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>",
    "<javax.servlet.ServletConfig: java.util.Enumeration getInitParameterNames()>",
    "<javax.servlet.http.HttpSession: java.lang.Object getAttribute(java.lang.String)>",
    "<java.rmi.Naming: java.lang.String[] list(java.lang.String)>",
    "<javax.faces.component.ValueHolder: java.lang.Object getValue()>",
    "<jakarta.servlet.http.HttpServletRequest: jakarta.servlet.ServletInputStream getInputStream()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getRequestedSessionId()>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getLocalName()>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.String getQueryString()>",
    "<javax.servlet.http.HttpServletRequest: java.util.Map getParameterMap()>",
    "<javax.faces.context.ExternalContext: java.util.Map getRequestCookieMap()>",
    "<com.sun.mail.smtp.SMTPTransport: java.lang.String getExtensionParameter(java.lang.String)>",
    "<org.apache.commons.fileupload.FileUploadBase: java.lang.String getHeaderEncoding()>",
    "<org.apache.commons.fileupload.FileUploadBase: java.lang.String getFileName(org.apache.commons.fileupload.FileItemHeaders)>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.String getPathTranslated()>",
    "<javax.servlet.ServletRequest: java.lang.String[] getParameterValues(java.lang.String)>",
    "<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.FileItemIterator getItemIterator(org.apache.commons.fileupload.RequestContext)>",
    "<javax.accessibility.AccessibleText: java.lang.String getAtIndex(int,int)>",
    "<javax.servlet.http.HttpServletRequest: java.io.BufferedReader getReader()>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>",
    "<javax.servlet.http.HttpServletRequest: java.util.Enumeration getLocales()>",
    "<javax.servlet.http.HttpServletRequest: java.util.Enumeration getHeaderNames()>",
    "<jakarta.servlet.http.HttpServletRequest: java.io.BufferedReader getReader()>",
    "<javax.servlet.http.HttpServletRequest: javax.servlet.http.Cookie[] getCookies()>",
    "<javax.servlet.ServletRequest: java.lang.String getLocalName()>",
    "<javax.servlet.http.HttpServletRequest: java.util.Locale getLocale()>",
    "<javax.servlet.http.HttpServletRequest: java.util.Collection getParts()>",
    "<javax.accessibility.AccessibleText: java.lang.String getBeforeIndex(int,int)>",
    "<jakarta.servlet.http.HttpServletRequest: java.util.Map getParameterMap()>",
    "<jakarta.servlet.http.HttpServletRequest: java.lang.String getRemoteUser()>",
    "<jakarta.servlet.http.HttpServletRequest: java.util.Enumeration getHeaders(java.lang.String)>",
    "<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>",
    "<org.apache.commons.fileupload.FileUploadBase: java.util.List parseReqhest(org.apache.commons.fileupload.RequestContext)>",
    "<jakarta.servlet.ServletRequest: java.util.Enumeration getParameterNames()>",
    "<org.apache.commons.fileupload.FileUploadBase: org.apache.commons.fileupload.FileItemHeaders getParsedHeaders(java.lang.String)>",
    "<javax.servlet.http.HttpServletRequest: java.lang.String getPathTranslated()>",
    "<javax.servlet.ServletRequest: java.lang.Object getAttribute(java.lang.String)>"
  ],
  "sinks": [
    "<javax.persistence.EntityManager: javax.persistence.Query createNativeQuery(java.lang.String,java.lang.String)>",
    "<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>",
    "<org.apache.axis.client.AdminClient: void main(java.lang.String[])>",
    "<java.net.URL: void <init>(java.lang.String)>",
    "<org.apache.axis.client.Call: java.lang.Object invoke(java.lang.String,java.lang.String,java.lang.Object[])>",
    "<org.apache.torque.util.BasePeer: int executeStatement(java.lang.String)>",
    "<java.lang.System: void loadLibrary(java.lang.String)>",
    "<java.util.zip.ZipFile: void <init>(java.lang.String,java.nio.charset.Charset)>",
    "<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])>",
    "<org.apache.torque.util.BasePeer: java.util.List executeQuery(java.lang.String,boolean,java.sql.Connection)>",
    "<java.lang.Runtime: void load(java.lang.String)>",
    "<org.apache.axis.client.AdminClient: java.lang.String process(java.io.InputStream)>",
    "<java.io.FileWriter: void <init>(java.lang.String,boolean)>",
    "<org.springframework.util.PropertiesPersister: void storeToXml(java.util.Properties,java.io.OutputStream,java.lang.String)>",
    "<org.springframework.util.PropertiesPersister: void storeToXml(java.util.Properties,java.io.OutputStream,java.lang.String,java.lang.String)>",
    "<org.owasp.esapi.Executor: org.owasp.esapi.ExecuteResult executeSystemCommand(java.io.File,java.util.List,java.io.File,org.owasp.esapi.codecs.Codec,boolean,boolean)>",
    "<java.net.URL: void <init>(java.net.URL,java.lang.String)>",
    "<java.io.FileWriter: void <init>(java.io.File)>",
    "<org.apache.axis.client.Call: void setSOAPActionURI(java.lang.String)>",
    "<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>",
    "<javax.script.Invocable: java.lang.Object invokeFunction(java.lang.String,java.lang.Object[])>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>",
    "<org.apache.axis.client.AdminClient: java.lang.String process(java.lang.String[])>",
    "<org.springframework.jdbc.core.JdbcTemplate: java.util.Map queryForMap(java.lang.String)>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>",
    "<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String[])>",
    "<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>",
    "<java.lang.Runtime: void loadLibrary(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>",
    "<org.apache.axis.client.Call: void setOperationName(java.lang.String)>",
    "<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>",
    "<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)>",
    "<java.lang.System: void load(java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>",
    "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectDomain)>",
    "<org.apache.axis.client.Call: void setTargetEndpointAddress(java.lang.String)>",
    "<java.io.FileReader: void <init>(java.io.File)>",
    "<java.sql.Statement: void addBatch(java.lang.String)>",
    "<org.springframework.jdbc.core.JdbcTemplate: org.springframework.jdbc.support.rowset.SqlRowSet queryForRowSet(java.lang.String)>",
    "<java.sql.Statement: boolean execute(java.lang.String,int[])>",
    "<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>",
    "<java.io.File: void <init>(java.io.File,java.lang.String)>",
    "<java.io.FileWriter: void <init>(java.io.FileDescriptor)>",
    "<java.io.File: void <init>(java.lang.String)>",
    "<org.apache.axis.client.AdminClient: java.lang.String process(org.apache.axis.utils.Options,java.lang.String)>",
    "<org.apache.axis.client.Call: void setOperation(java.lang.String)>",
    "<org.apache.axis.client.Call: void setTargetEndpointAddress(java.net.URL)>",
    "<java.io.FileOutputStream: void <init>(java.lang.String)>",
    "<flex.messaging.io.amf.client.AMFConnection: java.lang.Object call(java.lang.String,java.lang.Object[])>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>",
    "<java.io.FileReader: void <init>(java.lang.String)>",
    "<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>",
    "<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>",
    "<java.sql.Statement: boolean execute(java.lang.String,int)>",
    "<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.lang.Class)>",
    "<org.apache.torque.util.BasePeer: java.util.List executeQuery(java.lang.String,int,int,boolean,java.sql.Connection)>",
    "<java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>",
    "<org.apache.axis.client.Call: java.lang.Object invoke(java.lang.Object[])>",
    "<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>",
    "<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>",
    "<org.apache.axis.client.Call: void setOperationName(javax.xml.namespace.QNAme)>",
    "<java.io.FileInputStream: void <init>(java.lang.String)>",
    "<org.apache.axis.client.Call: void setOperation(javax.xml.namespace.QName,java.lang.String)>",
    "<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>",
    "<javax.persistence.EntityManager: javax.persistence.Query createQuery(javax.persistence.criteria.CriteriaUpdate)>",
    "<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>",
    "<org.apache.torque.util.BasePeer: int executeStatement(java.lang.String,java.sql.Connection)>",
    "<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)>",
    "<org.springframework.util.ReflectionUtils: java.lang.Object invokeJdbcMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>",
    "<org.apache.axis.client.AdminClient: java.lang.String process(org.apache.axis.utils.Options,java.io.InputStream)>",
    "<oracle.jbo.html.databeans.BaseNavigatorBar: void setImageDir(java.lang.String)>",
    "<javax.persistence.EntityManager: javax.persistence.Query createQuery(javax.persistence.criteria.CriteriaDelete)>",
    "<java.io.File: void <init>(java.lang.String,java.lang.String)>",
    "<org.apache.axis.client.Call: void setOperation(javax.xml.namespace.QName,javax.xml.namespace.QName)>",
    "<javax.script.Invocable: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>",
    "<org.apache.commons.compress.archivers.zip.ZipFile: void <init>(java.lang.String)>",
    "<flex.management.jmx.MBeanServerGateWay: java.lang.Object invoke(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String[])>",
    "<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>",
    "<org.springframework.util.PropertiesPersister: void store(java.util.Properties,java.io.Writer,java.lang.String)>",
    "<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)>",
    "<org.springframework.jdbc.core.JdbcTemplate: java.util.List query(java.lang.String,org.springframework.jdbc.core.RowMapper)>",
    "<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(javax.persistence.criteria.CriteriaQuery)>",
    "<org.apache.axis.client.Call: void setOperation(org.apache.axis.description.OperationDesc)>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String)>",
    "<org.owasp.esapi.Executor: org.owasp.esapi.ExecuteResult executeSystemCommand(java.io.File,java.util.List)>",
    "<org.springframework.util.ReflectionUtils: java.lang.Object invokeJdbcMethod(java.lang.reflect.Method,java.lang.Object)>",
    "<org.apache.torque.util.BasePeer: java.util.List executeQuery(java.lang.String)>",
    "<javax.persistence.EntityManager: javax.persistence.Query createNativeQuery(java.lang.String,java.lang.Class)>",
    "<oracle.jbo.html.databeans.RowSetBrowser: void setImageDir(java.lang.String)>",
    "<java.sql.Statement: int executeUpdate(java.lang.String,int[])>",
    "<org.apache.axis.client.Call: java.lang.Object invoke(java.lang.String,java.lang.Object[])>",
    "<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)>",
    "<java.io.FileReader: void <init>(java.io.FileDescriptor)>",
    "<java.io.FileWriter: void <init>(java.io.File,boolean)>",
    "<java.lang.ProcessBuilder: void <init>(java.lang.String[])>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>",
    "<java.io.File: void <init>(java.net.URI)>",
    "<org.springframework.util.ResourceUtils: java.io.File(java.lang.String)>",
    "<java.sql.Statement: boolean execute(java.lang.String,java.lang.String[])>",
    "<org.springframework.jdbc.core.JdbcTemplate: void execute(java.lang.String)>",
    "<org.apache.commons.compress.archivers.zip.ZipFile: void <init>(java.lang.String,java.lang.String)>",
    "<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>",
    "<org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>",
    "<org.apache.torque.util.BasePeer: java.util.List executeQuery(java.lang.String,java.lang.String)>",
    "<java.io.FileWriter: void <init>(java.lang.String)>",
    "<javax.persistence.EntityManager: javax.persistence.Query createQuery(java.lang.String)>",
    "<org.apache.torque.util.BasePeer: int executeStatement(java.lang.String,java.lang.String)>",
    "<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>",
    "<javax.faces.el.MethodBinding: java.lang.Object invoke(javax.faces.context.FacesContext,java.lang.Object[])>",
    "<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>",
    "<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])>",
    "<java.util.zip.ZipFile: void <init>(java.lang.String)>",
    "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>",
    "<java.sql.Statement: boolean execute(java.lang.String)>",
    "<org.apache.torque.util.BasePeer: java.util.List executeQuery(java.lang.String,java.lang.String,boolean)>",
    "<java.sql.Statement: int executeUpdate(java.lang.String)>",
    "<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>",
    "<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>",
    "<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>",
    "<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(java.lang.String,java.lang.Class)>",
    "<java.sql.Statement: int executeUpdate(java.lang.String,java.lang.String[])>",
    "<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)>",
    "<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String)>",
    "<javax.persistence.EntityManager: javax.persistence.Query createNativeQuery(java.lang.String)>",
    "<org.apache.torque.util.BasePeer: java.util.List executeQuery(java.lang.String,int,int,java.lang.String,boolean)>",
    "<org.springframework.util.PropertiesPersister: void store(java.util.Properties,java.io.OutputStream,java.lang.String)>",
    "<org.apache.axis.client.AdminClient: java.lang.String process(java.lang.String)>",
    "<org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object)>",
    "<java.lang.ProcessBuilder: java.util.List command()>",
    "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectDomain)>",
    "<javax.sql.RowSet: void setCommand(java.lang.String)>",
    "<org.apache.axis.client.AdminClient: java.lang.String process(java.net.URL)>",
    "<java.sql.Statement: int executeUpdate(java.lang.String,int)>",
    "<java.lang.ProcessBuilder: void <init>(java.util.List)>"
  ],
  "excludes": [
    "com.alibaba.*",
    "org.springframework.*"
  ],
  "autoDetect": true,
  "project": "/home/ran/Documents/work/thusa2/ifpc-testcase/WebGoat-5.0",
  "jdk": "/home/ran/Documents/work/thusa2/ifpc-testcase/jdk/rt.jar"
}
